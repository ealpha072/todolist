{"version":3,"sources":["Cardbody.js","index.js"],"names":["Todolist","todo","index","completeTodo","deleteTodo","editTodo","useState","editing","setEditing","editMode","display","id","className","style","margin","borderRadius","onDoubleClick","isCompleted","textDecoration","fontStyle","opacity","text","type","value","onKeyDown","e","key","onChange","target","onClick","TodoForm","addTodo","inputText","setInputText","onSubmit","preventDefault","placeholder","required","autoFocus","Cardbody","todos","setTodos","newTodos","splice","updateTodo","updatetext","newTodo","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAEA,SAASA,EAAT,GAAqE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,SACtD,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEIC,EAAW,CAACC,QAAQ,IAwBxB,OANGH,IAGCE,EAASC,QAAU,QAIhB,sBAAKC,GAAG,WAAWC,UAAW,qCAAsCC,MAAO,CAACC,OAAO,YAAaC,aAAa,QAASC,cAAe,WAhBxIR,GAAW,IAgBR,UACK,sBAAKI,UAAW,MAAhB,UACI,oBAAIC,MAAOZ,EAAKgB,YAzBT,CACnBC,eAAe,eACfC,UAAW,SACXC,QAAQ,IAsB+C,KAA3C,SAAmDnB,EAAKoB,OACxD,uBAAOC,KAAK,OAAOV,UAAW,eAAgBC,MAAOJ,EAAUc,MAAOtB,EAAKoB,KAAMG,UAhB7E,SAACC,GACJ,UAAVA,EAAEC,KACDlB,GAAW,IAcsGmB,SAAU,SAACF,GAAD,OAAKpB,EAASoB,EAAEG,OAAOL,MAAOrB,SAErJ,sBAAKU,UAAW,MAAhB,UACI,wBAAQA,UAAW,yBAA0BiB,QAAS,kBAAI1B,EAAaD,IAAvE,kBACA,wBAAQU,UAAW,6BAA8BiB,QAAS,kBAAIzB,EAAWF,IAAzE,uBAMpB,SAAS4B,EAAT,GAA6B,IAAVC,EAAS,EAATA,QACf,EAAkCzB,mBAAS,IAA3C,mBAAO0B,EAAP,KAAkBC,EAAlB,KASA,OACI,qBAAKrB,UAAW,MAAhB,SACI,qBAAKA,UAAW,0CAAhB,SACI,sBAAMsB,SAVG,SAACT,GAClBA,EAAEU,iBACEH,IACJD,EAAQC,GACRC,EAAa,MAML,SACI,sBAAKrB,UAAW,iBAAhB,UACI,qBAAKA,UAAW,MAAhB,SACI,uBAAOU,KAAK,OAAOV,UAAW,eAAgBwB,YAAY,cAAcC,UAAQ,EAACd,MAAOS,EAAWL,SAAU,SAACF,GAAD,OAAKQ,EAAaR,EAAEG,OAAOL,QAAQe,WAAS,MAE7J,qBAAK1B,UAAW,MAAhB,SACI,wBAAQA,UAAW,yBAAnB,8BAS5B,IA+Ce2B,EA/CG,WACd,MAA0BjC,mBAAS,CAC/B,CAAEe,KAAK,cAAeJ,aAAa,GACnC,CAAEI,KAAM,wBAAyBJ,aAAa,GAC9C,CAAEI,KAAM,6BAA8BJ,aAAa,KAHvD,mBAAOuB,EAAP,KAAcC,EAAd,KAWMtC,EAAe,SAACD,GAClB,IAAMwC,EAAQ,YAAOF,GACrBE,EAASxC,GAAOe,aAAgByB,EAASxC,GAAOe,YAChDwB,EAASC,IAGPtC,EAAa,SAAAF,GACf,IAAMwC,EAAQ,YAAOF,GACrBE,EAASC,OAAOzC,EAAO,GACvBuC,EAASC,IAGPE,EAAa,SAACC,EAAY3C,GAC5B,IAAMwC,EAAQ,YAAOF,GACrBE,EAASxC,GAAOmB,KAAOwB,EACvBJ,EAASC,IAGb,OACI,qCACI,cAACZ,EAAD,CAAUC,QAzBF,SAAAV,GACZ,IAAMyB,EAAO,sBAAON,GAAP,CAAc,CAACnB,UAC5BoB,EAASK,MAwBL,sBAAKlC,UAAW,OAAhB,UACI,qBAAKA,UAAW,cAAhB,SACI,6CAEJ,qBAAKA,UAAW,yBAAhB,SACK4B,EAAMO,KAAI,SAAC9C,EAAMC,GAAP,OACP,cAACF,EAAD,CAAUC,KAAMA,EAAkBC,MAAOA,EAAOC,aAAcA,EAAcC,WAAYA,EAAYC,SAAUuC,GAAnF1C,eCzGnD8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.27601609.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nfunction Todolist({todo, index, completeTodo, deleteTodo, editTodo}){\r\n    const [editing, setEditing] = useState(false)\r\n\r\n    let editMode = {display:''}\r\n    let viewMode = {display:''}\r\n    const completedStyle = {\r\n        textDecoration:\"line-through\",\r\n        fontStyle: \"italic\",\r\n        opacity:0.4\r\n    }\r\n\r\n    const handleEditing = ()=>{\r\n        setEditing(true)\r\n    }\r\n\r\n    const editingDone = (e) =>{\r\n        if(e.key === 'Enter'){\r\n            setEditing(false)\r\n        }\r\n    }\r\n\r\n    if(editing){\r\n        viewMode.display = 'none'\r\n    }else{\r\n        editMode.display = 'none'\r\n    }\r\n\r\n    return (\r\n           <div id=\"todoitem\" className={\"card-header row flex-wrap bg-light\"} style={{margin:\"10px 10px\", borderRadius:\"10px\"}} onDoubleClick={()=>handleEditing()}>\r\n                <div className={\"col\"} >\r\n                    <h5 style={todo.isCompleted?completedStyle:null }>{todo.text}</h5>\r\n                    <input type=\"text\" className={\"form-control\"} style={editMode} value={todo.text} onKeyDown={editingDone} onChange={(e)=>editTodo(e.target.value, index)}/>\r\n                </div>\r\n                <div className={\"col\"} > \r\n                    <button className={\"btn btn-sm btn-success\"} onClick={()=>completeTodo(index)}>Done</button> \r\n                    <button className={\"btn btn-sm btn-danger ml-2\"} onClick={()=>deleteTodo(index)}>Del</button>\r\n                </div>\r\n           </div>\r\n    )\r\n}\r\n\r\nfunction TodoForm({addTodo}){\r\n    const [inputText, setInputText] = useState('')\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        if(!inputText) return\r\n        addTodo(inputText)\r\n        setInputText('')\r\n    }\r\n\r\n    return(\r\n        <div className={\"row\"}>\r\n            <div className={\"col-lg-12 col-md-12 col-sm-12 col-sm-12\"}>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className={\"form-group row\"}>\r\n                        <div className={\"col\"}>\r\n                            <input type=\"text\" className={\"form-control\"} placeholder=\"Add Todo...\" required value={inputText} onChange={(e)=>setInputText(e.target.value)} autoFocus />\r\n                        </div>\r\n                        <div className={\"col\"}>\r\n                            <button className={\"btn btn-primary btn-sm\"}>+ Add</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Cardbody  = () => {\r\n    const [todos, setTodos] = useState([\r\n        { text:'New commits', isCompleted: false},\r\n        { text: \"Meet friend for lunch\", isCompleted: true },\r\n        { text: \"Build really cool todo app\", isCompleted: false }\r\n    ])\r\n\r\n    const addTodo = text =>{\r\n        const newTodo = [...todos, {text}]\r\n        setTodos(newTodo)\r\n    }\r\n\r\n    const completeTodo = (index)=>{\r\n        const newTodos = [...todos]\r\n        newTodos[index].isCompleted = !(newTodos[index].isCompleted)\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    const deleteTodo = index=>{\r\n        const newTodos = [...todos]\r\n        newTodos.splice(index, 1)\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    const updateTodo = (updatetext, index) => {\r\n        const newTodos = [...todos]\r\n        newTodos[index].text = updatetext\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <TodoForm addTodo={addTodo}/>\r\n            <div className={\"card\"}>\r\n                <div className={\"card-header\"}>\r\n                    <h6>Todo List</h6>\r\n                </div>\r\n                <div className={\"card-body bg-secondary\"}>\r\n                    {todos.map((todo, index)=>(\r\n                        <Todolist todo={todo} key={index} index={index} completeTodo={completeTodo} deleteTodo={deleteTodo} editTodo={updateTodo} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cardbody","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Cardbody from './Cardbody'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Cardbody />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}